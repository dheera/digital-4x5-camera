#!/usr/bin/env python3

import glob
import json
import os
import sys
import cv2
import numpy as np
import time
from camera.helpers import *

image_files = []
nbounds = [-1, -1]

DOWNSAMPLE = 4
DEBUG = "--debug" in sys.argv

print("Reading profile ...")
with open(os.path.join(sys.argv[1], "profile.json")) as f:
    profile = json.loads(f.read())
    overlap = profile.get("overlap", [0.0, 0.0])

print("Reading file list ...")
for fn in os.listdir(sys.argv[1]):
    if not fn.endswith(".jpg"):
        continue
    if not fn.startswith("img_"):
        continue
    tokens = fn.replace("img_", "").replace(".jpg", "").split("_")
    if len(tokens) != 2:
        continue
    xn = int(tokens[0])
    yn = int(tokens[1])

    assert(xn >= 0)
    assert(yn >= 0)

    if xn > nbounds[0]:
        nbounds[0] = xn
    if yn > nbounds[1]:
        nbounds[1] = yn

    image_files.append(fn)

assert(nbounds[0] >= 0)
assert(nbounds[1] >= 0)

print("Bounds: ", nbounds)

print("Checking completeness of file list ...")
for xn in range(0, nbounds[0]+1):
    for yn in range(0, nbounds[1]+1):
        assert("img_%d_%d.jpg" % (xn, yn) in image_files)

output_image = None
def initialize_output_image(shape):
    output_image = np.zeros(shape)

capture_params = {}
iso_mean = 0.0
exposure_time_mean = 0.0

print("Reading exif ...")
for xn in np.arange(0, nbounds[0]+1):
    for yn in np.arange(0, nbounds[1]+1):
        exif = read_exif(os.path.join(sys.argv[1], "img_%d_%d.jpg" % (xn, yn)))
        print(exif)
        capture_params[(xn, yn)] = exif
        iso_mean += exif["ISOSpeedRatings"]
        exposure_time_mean += exif["ExposureTime"]

iso_mean /= nbounds[0] * nbounds[1]
exposure_time_mean /= nbounds[0] * nbounds[1]

print("Mean ISO: %f Mean exposure time: %f" % (iso_mean, exposure_time_mean))

for xn in np.arange(0, nbounds[0]+1):
    for yn in np.arange(0, nbounds[1]+1):
        print("Processing (%d, %d)" % (xn, yn))
        data = read_raw(os.path.join(sys.argv[1], "img_%d_%d.jpg" % (xn, yn)))
        data = superpixel_debayer(data).astype(np.float32)
        # data = data[::DOWNSAMPLE, ::DOWNSAMPLE]
        data = downsample(data, DOWNSAMPLE)
        m = int(np.amax(data))
        data = np.rot90(data, 2).copy()
        if DEBUG:
            data = cv2.putText(data, "%d,%d" % (xn, yn), (50, int(data.shape[0]/2)), cv2.FONT_HERSHEY_SIMPLEX, 5, (m, m, m), 15)

        #data /= capture_params[(xn, yn)]["ISOSpeedRatings"] / iso_mean
        #data /= capture_params[(xn, yn)]["ExposureTime"] / exposure_time_mean
        # data[:,:,0] *= float(capture_params[(xn, yn)]["MakerNote"]["gain_b"])
        # data[:,:,2] *= float(capture_params[(xn, yn)]["MakerNote"]["gain_r"])
        data /= float(capture_params[(xn, yn)]["MakerNote"]["ag"])

        print(data.shape)

        shiftx = -int((nbounds[0] - xn) * data.shape[1] * overlap[0])
        shifty = -int(yn * data.shape[0] * overlap[1])
        print(shifty)

        if output_image is None:
            output_image = np.zeros(((nbounds[1]+1)*data.shape[0], (nbounds[0]+1)*data.shape[1], data.shape[2]), dtype = np.float32)
            print("Initialized output image with shape: ", output_image.shape)

        starty = yn * data.shape[0] + shifty
        startx = (nbounds[0] - xn) * data.shape[1] + shiftx

        output_image[ starty : starty+data.shape[0], startx : startx+data.shape[1], : ] = data

        output_image_downsized = output_image[::8, ::8, :]
        output_image_downsized = (255 * (output_image_downsized / np.amax(output_image_downsized))).astype(np.uint8)

        cv2.imshow("output", output_image_downsized)
        #cv2.imshow("output", data.astype(np.uint16))
        cv2.waitKey(1)

output_image = (65535 * (output_image / np.amax(output_image))).astype(np.uint16)
cv2.imwrite("output.tiff", output_image)
cv2.waitKey(0)
